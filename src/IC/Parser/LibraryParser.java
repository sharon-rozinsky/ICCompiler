
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package IC.Parser;

import IC.*;
import IC.AST.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class LibraryParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public LibraryParser() {super();}

  /** Constructor which sets the default scanner. */
  public LibraryParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LibraryParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\007\000\002\002\004\000\002\002" +
    "\006\000\002\003\003\000\002\003\004\000\002\004\011" +
    "\000\002\004\010\000\002\005\003\000\002\005\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\005\000\002\007\005\000\002\007\003\000\002\010" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\040\000\004\005\005\001\002\000\004\002\042\001" +
    "\002\000\004\060\006\001\002\000\004\052\007\001\002" +
    "\000\006\007\011\053\012\001\002\000\006\007\011\053" +
    "\040\001\002\000\012\010\017\011\020\012\016\013\015" +
    "\001\002\000\004\002\uffff\001\002\000\006\007\ufffe\053" +
    "\ufffe\001\002\000\006\056\036\061\ufffa\001\002\000\006" +
    "\056\ufff6\061\ufff6\001\002\000\006\056\ufff7\061\ufff7\001" +
    "\002\000\004\061\ufff9\001\002\000\006\056\ufff8\061\ufff8" +
    "\001\002\000\004\061\022\001\002\000\004\054\023\001" +
    "\002\000\012\011\020\012\016\013\015\055\027\001\002" +
    "\000\006\056\036\061\035\001\002\000\006\046\ufff3\055" +
    "\ufff3\001\002\000\006\046\031\055\032\001\002\000\004" +
    "\034\030\001\002\000\006\007\ufffb\053\ufffb\001\002\000" +
    "\010\011\020\012\016\013\015\001\002\000\004\034\033" +
    "\001\002\000\006\007\ufffc\053\ufffc\001\002\000\006\046" +
    "\ufff4\055\ufff4\001\002\000\006\046\ufff2\055\ufff2\001\002" +
    "\000\004\057\037\001\002\000\006\056\ufff5\061\ufff5\001" +
    "\002\000\004\002\001\001\002\000\006\007\ufffd\053\ufffd" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\040\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\007\004\012" +
    "\001\001\000\004\004\040\001\001\000\006\005\020\006" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\023\007\025\010\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\023\010\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LibraryParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LibraryParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LibraryParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Token t = lexer.next_token();
	if (isDebugMode)
		System.out.println(t.getLine() + ":" + Utils.getTokenName(t.getTag()));
	return t;

    }



	private Lexer lexer;
	
	public LibraryParser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}

	// used for printing the tokens in the scan with part
	public boolean isDebugMode;
	
	// overriding error methods
	public void unrecovered_syntax_error(Symbol s) throws SyntaxError {
		report_fatal_error(null, s);
	}
	
	public void report_fatal_error(String message, Object info) throws SyntaxError {
		throw new SyntaxError("");
	}
	
	public void report_error(String message, Object info) {
		if(message.equals("Syntax Error"));{
			done_parsing();
			printErrorMessage(info);
		}
	}
	
	public void printErrorMessage(Object info){
		Token token = (Token) info;
		List<Integer> expectedIds = null;
		String expectedIdsStr = ""; 
		try {
			expectedIds = expected_token_ids();
			for(int i = 0; i < expectedIds.size(); i++){
				if(i+1 == expectedIds.size())
					expectedIdsStr += Utils.getTokenName(expectedIds.get(i));
				else
					expectedIdsStr += Utils.getTokenName(expectedIds.get(i)) + " or ";
			}
		} catch (Exception e) {
			System.out
					.println(token.getLine() + ":"
							+ token.getColumn() + " : "
							+ "syntax error; Can't get list of expected tokens. Found: "
							+ token.getValue());
			return;
		}
		System.out.println(token.getLine() + ":" + token.getColumn() + " : "
				+ "syntax error; expected " + expectedIdsStr + ", but found "
				+ token.getValue());
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$LibraryParser$actions {
  private final LibraryParser parser;

  /** Constructor */
  CUP$LibraryParser$actions(LibraryParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$LibraryParser$do_action_part00000000(
    int                        CUP$LibraryParser$act_num,
    java_cup.runtime.lr_parser CUP$LibraryParser$parser,
    java.util.Stack            CUP$LibraryParser$stack,
    int                        CUP$LibraryParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LibraryParser$result;

      /* select the action based on the action number */
      switch (CUP$LibraryParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ICClass ::= CLASS CLASS_ID LP LibraryMethods RP 
            {
              ICClass RESULT =null;
		int classIdleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-3)).left;
		int classIdright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-3)).right;
		String classId = (String)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-3)).value;
		int libraryMethodsleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).left;
		int libraryMethodsright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).right;
		List<Method> libraryMethods = (List<Method>)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).value;
		 RESULT = new ICClass(classIdleft, classId, new ArrayList<Field>(), libraryMethods); 
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("ICClass",0, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-4)), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ICClass EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).right;
		ICClass start_val = (ICClass)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).value;
		RESULT = start_val;
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LibraryParser$parser.done_parsing();
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ICClass ::= CLASS CLASS_ID LP RP 
            {
              ICClass RESULT =null;
		int classIdleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)).left;
		int classIdright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)).right;
		String classId = (String)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)).value;
		 RESULT = new ICClass(classIdleft, classId, new ArrayList<Field>(), new ArrayList<Method>()); 
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("ICClass",0, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-3)), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LibraryMethods ::= LibraryMethod 
            {
              List<Method> RESULT =null;
		int libraryMethodleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).left;
		int libraryMethodright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).right;
		LibraryMethod libraryMethod = (LibraryMethod)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()).value;
		
		List<Method> methods = new ArrayList<Method>();
		methods.add(libraryMethod);
		RESULT = methods;
	
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("LibraryMethods",1, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LibraryMethods ::= LibraryMethods LibraryMethod 
            {
              List<Method> RESULT =null;
		int libraryMethodsleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).left;
		int libraryMethodsright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).right;
		List<Method> libraryMethods = (List<Method>)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).value;
		int libraryMethodleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).left;
		int libraryMethodright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).right;
		LibraryMethod libraryMethod = (LibraryMethod)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()).value;
		
		libraryMethods.add(libraryMethod);
		RESULT = libraryMethods;
	
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("LibraryMethods",1, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LibraryMethod ::= STATIC ReturnType ID LRP Formals RRP EOL 
            {
              LibraryMethod RESULT =null;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-5)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-5)).right;
		Type returnType = (Type)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-4)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)).right;
		List<Formal> formals = (List<Formal>)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)).value;
		 RESULT = new LibraryMethod(returnType, id, formals); 
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("LibraryMethod",2, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-6)), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LibraryMethod ::= STATIC ReturnType ID LRP RRP EOL 
            {
              LibraryMethod RESULT =null;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-4)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-4)).right;
		Type returnType = (Type)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-3)).value;
		 RESULT = new LibraryMethod(returnType, id, new ArrayList<Formal>()); 
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("LibraryMethod",2, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-5)), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ReturnType ::= Type 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()).value;
		 RESULT = type; 
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("ReturnType",3, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ReturnType ::= VOID 
            {
              Type RESULT =null;
		int voidTokenleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).left;
		int voidTokenright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).right;
		Object voidToken = (Object)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()).value;
		 RESULT = new PrimitiveType(voidTokenleft, DataTypes.VOID); 
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("ReturnType",3, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= INT 
            {
              Type RESULT =null;
		int intTokenleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).left;
		int intTokenright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).right;
		Object intToken = (Object)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()).value;
		 RESULT = new PrimitiveType(intTokenleft, DataTypes.INT); 
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= BOOLEAN 
            {
              Type RESULT =null;
		int boolTokenleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).left;
		int boolTokenright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).right;
		Object boolToken = (Object)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()).value;
		 RESULT = new PrimitiveType(boolTokenleft, DataTypes.BOOLEAN); 
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= STR 
            {
              Type RESULT =null;
		int strTokenleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).left;
		int strTokenright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).right;
		Object strToken = (Object)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()).value;
		 RESULT = new PrimitiveType(strTokenleft, DataTypes.STRING); 
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= Type LSP RSP 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)).value;
		
		type.incrementDimension();
		RESULT = type;
	
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Formals ::= Formals COMMA Formal 
            {
              List<Formal> RESULT =null;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)).right;
		List<Formal> formals = (List<Formal>)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)).value;
		int formalleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).left;
		int formalright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).right;
		Formal formal = (Formal)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()).value;
		
		formals.add(formal);
		RESULT = formals;
	
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("Formals",5, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-2)), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Formals ::= Formal 
            {
              List<Formal> RESULT =null;
		int formalleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).left;
		int formalright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).right;
		Formal formal = (Formal)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()).value;
		
		List<Formal> formals = new ArrayList<Formal>();
		formals.add(formal);
		RESULT = formals; 
	
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("Formals",5, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Formal ::= Type ID 
            {
              Formal RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LibraryParser$stack.peek()).value;
		 RESULT = new Formal(type, id); 
              CUP$LibraryParser$result = parser.getSymbolFactory().newSymbol("Formal",6, ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.elementAt(CUP$LibraryParser$top-1)), ((java_cup.runtime.Symbol)CUP$LibraryParser$stack.peek()), RESULT);
            }
          return CUP$LibraryParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$LibraryParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$LibraryParser$do_action(
    int                        CUP$LibraryParser$act_num,
    java_cup.runtime.lr_parser CUP$LibraryParser$parser,
    java.util.Stack            CUP$LibraryParser$stack,
    int                        CUP$LibraryParser$top)
    throws java.lang.Exception
    {
              return CUP$LibraryParser$do_action_part00000000(
                               CUP$LibraryParser$act_num,
                               CUP$LibraryParser$parser,
                               CUP$LibraryParser$stack,
                               CUP$LibraryParser$top);
    }
}

}
