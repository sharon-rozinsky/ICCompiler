import IC.AST.*;
import IC.Types.*;
import IC.Error.*;
import java_cup.runtime.*;

import java.util.ArrayList;
import java.util.List;

//////////////////////
// Additional methods

parser code {:

	private Lexer lexer;
	
	public LibraryParser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}

	// used for printing the tokens in the scan with part
	public boolean isDebugMode;
	
	public void unrecovered_syntax_error(Symbol s) throws SyntaxError {
		report_fatal_error(null, s);
	}
	
	public void report_fatal_error(String message, Object info) throws SyntaxError {
		throw new SyntaxError("");
	}
	
	public void report_error(String message, Object info) {
		if(message.equals("Syntax Error"));{
			done_parsing();
			printErrorMessage(info);
		}
	}
	
	public void printErrorMessage(Object info){
		Token token = (Token) info;
		List<Integer> expectedIds = null;
		String expectedIdsStr = ""; 
		try {
			expectedIds = expected_token_ids();
			for(int i = 0; i < expectedIds.size(); i++){
				if(i+1 == expectedIds.size())
					expectedIdsStr += Utils.getTokenName(expectedIds.get(i));
				else
					expectedIdsStr += Utils.getTokenName(expectedIds.get(i)) + " or ";
			}
		} catch (Exception e) {
			System.out
					.println(token.getLine() + ":"
							+ token.getColumn() + " : "
							+ "syntax error; Can't get list of expected tokens. Found: "
							+ token.getValue());
			return;
		}
		System.out.println(token.getLine() + ":" + token.getColumn() + " : "
				+ "syntax error; expected " + expectedIdsStr + ", but found "
				+ token.getValue());
	}
:};

scan with {:
	Token t = lexer.next_token();
	if (isDebugMode)
		System.out.println(t.getLine() + ":" + Utils.getTokenName(t.getTag()));
	return t;
:};

////////////////////////////////////////////
// Symbol list (terminals and non-terminals)

terminal RETURN;
terminal CLASS;
terminal EXTENDS;
terminal STATIC;
terminal VOID;
terminal INT;
terminal BOOLEAN;
terminal STR;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal BREAK;
terminal CONTINUE;
terminal THIS;
terminal NEW;
terminal LENGTH;
terminal TRUE;
terminal FALSE;
terminal NULL;
terminal EQ;
terminal PLUS;
terminal MUL;
terminal SUB;
terminal DIV;
terminal EOL;
terminal MOD;
terminal ST;
terminal STEQ;
terminal GT;
terminal GTEQ;
terminal EQEQ;
terminal NOTEQ;
terminal AND;
terminal OR;
terminal COMMA;
terminal DOT;
terminal NOT;
terminal UMINUS;
terminal LP;
terminal RP;
terminal LRP;
terminal RRP;
terminal LSP;
terminal RSP;   

terminal String CLASS_ID;
terminal String ID;
terminal String INTEGER;
terminal String STRING;

non terminal ICClass ICClass;
non terminal List<Method> LibraryMethods;
non terminal LibraryMethod LibraryMethod;
non terminal Type ReturnType;
non terminal Type Type;
non terminal List<Formal> Formals;
non terminal Formal Formal;

//////////////
// The grammar

ICClass ::=
	CLASS CLASS_ID:classId LP LibraryMethods:libraryMethods RP
	{: RESULT = new ICClass(classIdleft, classId, new ArrayList<Field>(), libraryMethods); :} 
	| 
	CLASS CLASS_ID:classId LP RP
	{: RESULT = new ICClass(classIdleft, classId, new ArrayList<Field>(), new ArrayList<Method>()); :};
	
LibraryMethods ::= 
	LibraryMethod:libraryMethod
	{:
		List<Method> methods = new ArrayList<Method>();
		methods.add(libraryMethod);
		RESULT = methods;
	:}
	| 
	LibraryMethods:libraryMethods LibraryMethod:libraryMethod 
	{:
		libraryMethods.add(libraryMethod);
		RESULT = libraryMethods;
	:};

LibraryMethod ::= 
	STATIC ReturnType:returnType ID:id LRP Formals:formals RRP EOL 
	{: RESULT = new LibraryMethod(returnType, id, formals); :}
	|
	STATIC ReturnType:returnType ID:id LRP RRP EOL
	{: RESULT = new LibraryMethod(returnType, id, new ArrayList<Formal>()); :};
	
ReturnType ::= 
	Type:type 
	{: RESULT = type; :} 
	| 
	VOID:voidToken
	{: RESULT = new PrimitiveType(voidTokenleft, DataTypes.VOID); :};
	
Type ::= 
	INT:intToken 
	{: RESULT = new PrimitiveType(intTokenleft, DataTypes.INT); :}
	| 
	BOOLEAN:boolToken
	{: RESULT = new PrimitiveType(boolTokenleft, DataTypes.BOOLEAN); :} 
	| 
	STR:strToken
	{: RESULT = new PrimitiveType(strTokenleft, DataTypes.STRING); :}  
	| 
	Type:type LSP RSP
	{:
		type.incrementDimension();
		RESULT = type;
	:};
	
Formals ::= 
	Formals:formals COMMA Formal:formal 
	{:
		formals.add(formal);
		RESULT = formals;
	:}
	| 
	Formal:formal
	{:
		List<Formal> formals = new ArrayList<Formal>();
		formals.add(formal);
		RESULT = formals; 
	:};
	
Formal ::= 
	Type:type ID:id
	{: RESULT = new Formal(type, id); :};
